name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs: 
        environment:
            description: 'Deployment Environment'
            required: true
            default: 'production'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display current directory
        run: |
          pwd
          ls -al
          
      - name: Install and build
        run: |
          npm install
          npm run build
      - name: List source directory contents
        run: ls -la .next

      - name: Create deployment artefact
        run: tar -czf ${{ github.sha }}.tar.gz -C .next .

      - name: Store artefact for distribution
        uses: actions/upload-artifact@v4
        with:
            name: app-build
            path: ${{ github.sha }}.tar.gz

  # unit-test:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   needs: build

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18.16.1
  #         cache: "npm"

  #     - name: Install dependencies and run tests
  #       run: |
  #         npm install
  #         npm test



  prepare-release-on-servers:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download deployment artefact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: .next

      - name: Create artifact directory
        run: mkdir -p artifact
          
      - name: Extract files
        run: tar -xzf .next/${{ github.sha }}.tar.gz -C .

      - name: Drop zip and tar files
        run: rm ${{ github.sha }}.tar.gz
  
      - name: Copy file via SSH key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          source: .
          target: ${{ secrets.DEPLOY_PATH }}
          overwrite: true
          debug: true
          
      - name: SSH into the server and restart PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            pm2 start npm --name app -- run start -- -p 3000
            pm2 reload app
            pm2 show app
